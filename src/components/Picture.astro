---
//! astro-head-inject
import type {
  ImgProcPictureComponentProps,
  ImgProcProcessorOptions,
} from '../types';
import { injectStyle } from './injectStyle';
import { injectLink } from './injectLink';
import { PictureSource } from '../api/PictureSource';

type Props = ImgProcPictureComponentProps;

const {
  src,
  width,
  height,
  densities,
  widths,
  sizes,
  placeholder,
  placeholderColor,
  blurProcessor,
  upscale,
  layout,
  objectFit,
  objectPosition,
  enforceAspectRatio,
  preload,
  processor,
  profile,
  formats,
  formatOptions,
  artDirectives,
  pictureAttributes,
  containerAttributes: rawContainerAttributes,
  class: className,
  tagName,
  asBackground: asBackgroundProp,
  ...restProps
} = Astro.props;

// for `exactOptionalPropertyTypes: true`
// NOTE: Specifying `undefined` for property in the component has no effect.
const options = Object.fromEntries(
  Object.entries({
    src,
    width,
    height,
    densities,
    widths,
    sizes,
    placeholder,
    placeholderColor,
    blurProcessor,
    upscale,
    layout,
    objectFit,
    objectPosition,
    enforceAspectRatio,
    preload,
    processor,
    profile,
    formats,
    formatOptions,
    artDirectives,
    pictureAttributes,
    className,
  }).filter(([, value]) => value !== undefined),
) as Partial<ImgProcProcessorOptions> & { src: string };

// Enable background mode if slot exists
const asBackground = asBackgroundProp || Astro.slots.has('default');

// Container tag name for background mode
const TagName = tagName || 'div';

// Prepare to inherit `crossorigin` from component to <link> element
if (typeof restProps.crossorigin === 'string') {
  options.crossOrigin = restProps.crossorigin;
}

// Prepare to merge additional classes into the picture element
const { class: pictureClassName, ...rawPictureAttributes } =
  pictureAttributes || {};

// Pick `data-astro-cid-[hash]` attribute to inherit from Astro
const [cid] = Object.keys(restProps).filter((key) =>
  key.startsWith('data-astro-cid-'),
);

// Pick `astro-[hash]` class to inherit from Astro
const classByAstro = className
  ?.split(' ')
  .filter((cls) => cls.startsWith('astro-'));

// Run image processor
const {
  imageAttributes,
  imageClassList,
  pictureAttributes: additionalPictureAttributes,
  pictureClassList,
  sources,
  containerClassList,
  containerAttributes,
  css,
  links,
} = await PictureSource.factory({
  ctx: globalThis.imageProcessorContext,
  asBackground,
  options,
});

// Generate <style> and <link> elements for injection
const [InjectStyle, InjectLink] = await Promise.all([
  css ? injectStyle(css) : undefined,
  links ? injectLink(links) : undefined,
]);
---

{
  asBackground ? (
    <TagName
      class:list={[containerClassList, classByAstro]}
      {...(rawContainerAttributes as Record<string, unknown> | undefined)}
      {...containerAttributes}
      {...(cid && { [cid]: true })}
    >
      <picture
        class:list={[pictureClassName, pictureClassList, classByAstro]}
        {...rawPictureAttributes}
        {...additionalPictureAttributes}
        {...(cid && { [cid]: true })}
      >
        {sources && sources.map((attr) => <source {...attr} />)}
        <img
          class:list={[className, imageClassList]}
          {...restProps}
          {...imageAttributes}
        />
      </picture>
      <slot />
    </TagName>
  ) : (
    <picture
      class:list={[pictureClassName, pictureClassList, classByAstro]}
      {...rawPictureAttributes}
      {...additionalPictureAttributes}
      {...(cid && { [cid]: true })}
    >
      {sources && sources.map((attr) => <source {...attr} />)}
      <img
        class:list={[className, imageClassList]}
        {...restProps}
        {...imageAttributes}
      />
    </picture>
  )
}

{InjectStyle && <InjectStyle />}
{InjectLink && <InjectLink />}
